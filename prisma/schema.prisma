datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model User {
  userId    Int      @id @default(autoincrement())
  firstName String?  @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  email     String   @unique
  password  String   @db.VarChar(255)
  avatar    String?  @db.VarChar(255)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())

  Session Session[]

  ProjectCreated Project[] @relation("CreatedProject")
  ProjectUpdated Project[] @relation("UpdatedProject")
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

model Session {
  sessionId String @unique @default(uuid())
  user      User   @relation(references: [userId], fields: [userId])
  userId    Int
}

model Contact {
  contactId Int     @id @default(autoincrement())
  prefix    String? @default("")
  firstName String? @default("")
  lastName  String? @default("")
  fullName  String? @default("")
  suffix    String? @default("")
  nickname  String? @default("")
  email     String? @default("")
  phone     String? @default("")
  org       String? @default("")
  title     String? @default("")
  street    String? @default("")
  city      String? @default("")
  state     String? @default("")
  zipCode   String? @default("")
  avatar    String? @default("")

  parties Party[]
}

model Property {
  propertyId       Int     @id @default(autoincrement())
  street           String? @db.VarChar(255)
  city             String? @db.VarChar(255)
  state            String? @db.VarChar(255)
  zipCode          String? @db.VarChar(15)
  country          String? @default("USA") @db.VarChar(255)
  county           String? @db.VarChar(255)
  parcelId         String? @db.VarChar(64)
  shortDescription String?
  legalDescription String?

  projects ParcelsInProjects[]
}

model Project {
  projectId   Int     @id @default(autoincrement())
  projectType String? @db.VarChar(64)

  createdBy       User?    @relation("CreatedProject", references: [userId], fields: [createdByUserId])
  createdByUserId Int
  createdAt       DateTime @default(now())
  updatedBy       User?    @relation("UpdatedProject", references: [userId], fields: [updatedbyUserId])
  updatedbyUserId Int?
  updatedAt       DateTime @updatedAt

  parcels ParcelsInProjects[]
  parties Party[]
}

model ParcelsInProjects {
  propertyId    Int
  projectId     Int
  vesting       String?
  assessedValue Int?
  assessedYear  Int?
  updatedAt     DateTime @updatedAt

  property Property @relation(references: [propertyId], fields: [propertyId])
  project  Project  @relation(references: [projectId], fields: [projectId])

  @@id([propertyId, projectId])
}

model Party {
  partyId   Int     @id @default(autoincrement())
  contactId Int
  projectId Int
  role      String? @default("") // role of the connection, e.g., "counsel", "client", "agent", "trustee", "borrower", "lender", etc.
  manages   Party[] @relation("ManagesToManagedBy", references: [partyId], fields: [partyId])
  managedBy Party[] @relation("ManagesToManagedBy", references: [partyId], fields: [partyId])

  contact Contact @relation(references: [contactId], fields: [contactId])
  project Project @relation(references: [projectId], fields: [projectId])
}
