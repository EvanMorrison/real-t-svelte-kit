datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model User {
  userId    Int      @id @default(autoincrement())
  firstName String?  @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  email     String   @unique
  password  String   @db.VarChar(255)
  avatar    String?  @db.VarChar(255)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())

  Session Session[]

  OrgsCreated    Org[]     @relation("CreatedOrg")
  OrgsUpdated    Org[]     @relation("UpdatedOrg")
  PeopleCreated  Person[]  @relation("CreatedPerson")
  PeopleUpdated  Person[]  @relation("UpdatedPerson")
  ProjectCreated Project[] @relation("CreatedProject")
  ProjectUpdated Project[] @relation("UpdatedProject")
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

model Session {
  sessionId String @unique @default(uuid())
  user      User   @relation(references: [userId], fields: [userId])
  userId    Int
}

model Org {
  orgId         Int            @id @default(autoincrement())
  name          String?
  fullLegalName String?
  street1       String?        @db.VarChar(255)
  street2       String?        @db.VarChar(255)
  city          String?        @db.VarChar(255)
  state         String?        @db.VarChar(255)
  zipCode       String?        @db.VarChar(15)
  country       String?        @default("USA") @db.VarChar(255)
  orgType       String?        @db.VarChar(255)
  parentId      Int?
  notes         String?
  people        PeopleInOrgs[]
  parent        Org?           @relation("OrgToOrg", references: [orgId], fields: [parentId])
  children      Org[]          @relation("OrgToOrg")
  createdAt     DateTime       @default(now())
  createdById   Int
  updatedAt     DateTime?      @updatedAt
  updatedById   Int?

  createdBy         User?               @relation("CreatedOrg", fields: [createdById], references: [userId])
  updatedBy         User?               @relation("UpdatedOrg", fields: [updatedById], references: [userId])
  PartiesInProjects PartiesInProjects[]
}

model Person {
  personId    Int            @id @default(autoincrement())
  avatar      String?
  prefix      String?        @db.VarChar(255)
  fullName    String?
  suffix      String?        @db.VarChar(255)
  nickname    String?        @db.VarChar(64)
  email       String?        @db.VarChar(255)
  phone       String?        @db.VarChar(64)
  otherEmails Email[]
  otherPhones Phone[]
  orgName     String?
  title       String?        @db.VarChar(255)
  street1     String?        @db.VarChar(255)
  street2     String?        @db.VarChar(255)
  city        String?        @db.VarChar(255)
  state       String?        @db.VarChar(255)
  zipCode     String?        @db.VarChar(15)
  orgs        PeopleInOrgs[]
  notes       String?
  createdAt   DateTime       @default(now())
  createdById Int
  updatedAt   DateTime?      @updatedAt
  updatedById Int?

  createdBy         User?               @relation("CreatedPerson", fields: [createdById], references: [userId])
  updatedBy         User?               @relation("UpdatedPerson", fields: [updatedById], references: [userId])
  PartiesInProjects PartiesInProjects[]
  userUserId        Int?
}

model PeopleInOrgs {
  person   Person  @relation(references: [personId], fields: [personId])
  personId Int
  org      Org     @relation(references: [orgId], fields: [orgId])
  orgId    Int
  title    String? @db.VarChar(255)

  @@id([personId, orgId])
}

model Email {
  emailId   Int     @id @default(autoincrement())
  email     String  @db.VarChar(255)
  isPrimary Boolean @default(false)
  personId  Int

  person Person? @relation(references: [personId], fields: [personId])
}

model Phone {
  phoneId     Int     @id @default(autoincrement())
  category    String? @db.VarChar(64)
  countryCode String? @default("10")
  phone       String  @db.VarChar(16)
  extension   String? @db.VarChar(16)
  isPrimary   Boolean @default(false)
  personId    Int

  person Person? @relation(references: [personId], fields: [personId])
}

model Property {
  propertyId       Int     @id @default(autoincrement())
  street1          String? @db.VarChar(255)
  street2          String? @db.VarChar(255)
  city             String? @db.VarChar(255)
  state            String? @db.VarChar(255)
  zipCode          String? @db.VarChar(15)
  country          String? @default("USA") @db.VarChar(255)
  county           String? @db.VarChar(255)
  parcelId         String? @db.VarChar(64)
  shortDescription String?
  legalDescription String?

  projects PropertiesInProjects[]
}

model Project {
  projectId   Int     @id @default(autoincrement())
  projectType String? @db.VarChar(64)

  createdBy       User?    @relation("CreatedProject", references: [userId], fields: [createdByUserId])
  createdByUserId Int
  createdAt       DateTime @default(now())
  updatedBy       User?    @relation("UpdatedProject", references: [userId], fields: [updatedbyUserId])
  updatedbyUserId Int?
  updatedAt       DateTime @updatedAt

  parcels PropertiesInProjects[]

  parties PartiesInProjects[]
  roles   String[]

}

model PropertiesInProjects {
  property      Property @relation(references: [propertyId], fields: [propertyId])
  propertyId    Int
  project       Project  @relation(references: [projectId], fields: [projectId])
  projectId     Int
  vesting       String?
  assessedValue Int?
  assessedYear  Int?
  updatedAt     DateTime @updatedAt

  @@id([propertyId, projectId])
}

model PartiesInProjects {
  project    Project @relation(fields: [projectId], references: [projectId])
  projectId  Int
  orgId      Int     @default(0)
  personId   Int     @default(0)
  role       String? @db.VarChar(255)
  isPrimary  Boolean @default(false)
  worksForId Int?

  partyDisplayIndex Int? @default(0)

  worksFor PartiesInProjects?  @relation("PartyToParty", fields: [partiesInProjectsProjectId, partiesInProjectsOrgId, partiesInProjectsPersonId], references: [projectId, orgId, personId])
  hired    PartiesInProjects[] @relation("PartyToParty")
  org      Org?                @relation(fields: [orgId], references: [orgId])
  person   Person?             @relation(fields: [personId], references: [personId])

  partiesInProjectsProjectId Int?
  partiesInProjectsOrgId     Int?
  partiesInProjectsPersonId  Int?
  @@id([projectId, orgId, personId])
}
